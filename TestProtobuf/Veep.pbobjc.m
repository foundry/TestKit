// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: veep.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 1
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Veep.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - VPKPVeepRoot

@implementation VPKPVeepRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - VPKPVeepRoot_FileDescriptor

static GPBFileDescriptor *VPKPVeepRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"veepio"
                                                 objcPrefix:@"VPKP"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - VPKPVeep

@implementation VPKPVeep

@dynamic hasHeader, header;
@dynamic trackElementsArray, trackElementsArray_Count;

typedef struct VPKPVeep__storage_ {
  uint32_t _has_storage_[1];
  VPKPVeepHeader *header;
  NSMutableArray *trackElementsArray;
} VPKPVeep__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPVeepHeader),
        .number = VPKPVeep_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPVeep__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trackElementsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPVeepTrackElement),
        .number = VPKPVeep_FieldNumber_TrackElementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VPKPVeep__storage_, trackElementsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPVeep class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPVeep__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000trackElements\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPVeepHeaderContainer

@implementation VPKPVeepHeaderContainer

@dynamic hasHeader, header;

typedef struct VPKPVeepHeaderContainer__storage_ {
  uint32_t _has_storage_[1];
  VPKPVeepHeader *header;
} VPKPVeepHeaderContainer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPVeepHeader),
        .number = VPKPVeepHeaderContainer_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPVeepHeaderContainer__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPVeepHeaderContainer class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPVeepHeaderContainer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPVeepTrackElementContainer

@implementation VPKPVeepTrackElementContainer

@dynamic hasTrackElement, trackElement;

typedef struct VPKPVeepTrackElementContainer__storage_ {
  uint32_t _has_storage_[1];
  VPKPVeepTrackElement *trackElement;
} VPKPVeepTrackElementContainer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "trackElement",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPVeepTrackElement),
        .number = VPKPVeepTrackElementContainer_FieldNumber_TrackElement,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPVeepTrackElementContainer__storage_, trackElement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPVeepTrackElementContainer class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPVeepTrackElementContainer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPVeepHeader

@implementation VPKPVeepHeader

@dynamic identifier;
@dynamic title;
@dynamic description_p;
@dynamic creatorEmail;
@dynamic thumbnailData;
@dynamic originalContentURL;

typedef struct VPKPVeepHeader__storage_ {
  uint32_t _has_storage_[1];
  NSString *identifier;
  NSString *title;
  NSString *description_p;
  NSString *creatorEmail;
  NSData *thumbnailData;
  NSString *originalContentURL;
} VPKPVeepHeader__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identifier",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepHeader_FieldNumber_Identifier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPVeepHeader__storage_, identifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepHeader_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKPVeepHeader__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepHeader_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VPKPVeepHeader__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "creatorEmail",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepHeader_FieldNumber_CreatorEmail,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VPKPVeepHeader__storage_, creatorEmail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbnailData",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepHeader_FieldNumber_ThumbnailData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VPKPVeepHeader__storage_, thumbnailData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "originalContentURL",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepHeader_FieldNumber_OriginalContentURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VPKPVeepHeader__storage_, originalContentURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPVeepHeader class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPVeepHeader__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\014\000\005\r\000\006\020!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPVeepTrackHeader

@implementation VPKPVeepTrackHeader

@dynamic identifier;
@dynamic title;
@dynamic description_p;
@dynamic URL;
@dynamic type;

typedef struct VPKPVeepTrackHeader__storage_ {
  uint32_t _has_storage_[1];
  VPKPVeepTrackHeader_VeepTrackType type;
  NSString *identifier;
  NSString *title;
  NSString *description_p;
  NSString *URL;
} VPKPVeepTrackHeader__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identifier",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepTrackHeader_FieldNumber_Identifier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPVeepTrackHeader__storage_, identifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepTrackHeader_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKPVeepTrackHeader__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepTrackHeader_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VPKPVeepTrackHeader__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepTrackHeader_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VPKPVeepTrackHeader__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = VPKPVeepTrackHeader_VeepTrackType_EnumDescriptor,
        .number = VPKPVeepTrackHeader_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VPKPVeepTrackHeader__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPVeepTrackHeader class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPVeepTrackHeader__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VPKPVeepTrackHeader_Type_RawValue(VPKPVeepTrackHeader *message) {
  GPBDescriptor *descriptor = [VPKPVeepTrackHeader descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKPVeepTrackHeader_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetVPKPVeepTrackHeader_Type_RawValue(VPKPVeepTrackHeader *message, int32_t value) {
  GPBDescriptor *descriptor = [VPKPVeepTrackHeader descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VPKPVeepTrackHeader_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum VPKPVeepTrackHeader_VeepTrackType

GPBEnumDescriptor *VPKPVeepTrackHeader_VeepTrackType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "URL\000Retail\000Blog\000";
    static const int32_t values[] = {
        VPKPVeepTrackHeader_VeepTrackType_URL,
        VPKPVeepTrackHeader_VeepTrackType_Retail,
        VPKPVeepTrackHeader_VeepTrackType_Blog,
    };
    static const char *extraTextFormatInfo = "\001\000\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(VPKPVeepTrackHeader_VeepTrackType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VPKPVeepTrackHeader_VeepTrackType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VPKPVeepTrackHeader_VeepTrackType_IsValidValue(int32_t value__) {
  switch (value__) {
    case VPKPVeepTrackHeader_VeepTrackType_URL:
    case VPKPVeepTrackHeader_VeepTrackType_Retail:
    case VPKPVeepTrackHeader_VeepTrackType_Blog:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VPKPRect

@implementation VPKPRect

@dynamic x;
@dynamic y;
@dynamic width;
@dynamic height;

typedef struct VPKPRect__storage_ {
  uint32_t _has_storage_[1];
  float x;
  float y;
  float width;
  float height;
} VPKPRect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = VPKPRect_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPRect__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = VPKPRect_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKPRect__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = VPKPRect_FieldNumber_Width,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VPKPRect__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = VPKPRect_FieldNumber_Height,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VPKPRect__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPRect class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPRect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPDiscreteTime

@implementation VPKPDiscreteTime

@dynamic timescale;
@dynamic value;

typedef struct VPKPDiscreteTime__storage_ {
  uint32_t _has_storage_[1];
  int32_t timescale;
  int64_t value;
} VPKPDiscreteTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timescale",
        .dataTypeSpecific.className = NULL,
        .number = VPKPDiscreteTime_FieldNumber_Timescale,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPDiscreteTime__storage_, timescale),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = VPKPDiscreteTime_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKPDiscreteTime__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPDiscreteTime class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPDiscreteTime__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPDiscreteTimeRange

@implementation VPKPDiscreteTimeRange

@dynamic hasStart, start;
@dynamic hasDuration, duration;

typedef struct VPKPDiscreteTimeRange__storage_ {
  uint32_t _has_storage_[1];
  VPKPDiscreteTime *start;
  VPKPDiscreteTime *duration;
} VPKPDiscreteTimeRange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPDiscreteTime),
        .number = VPKPDiscreteTimeRange_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPDiscreteTimeRange__storage_, start),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPDiscreteTime),
        .number = VPKPDiscreteTimeRange_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKPDiscreteTimeRange__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPDiscreteTimeRange class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPDiscreteTimeRange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPDiscreteTimeRangeRect

@implementation VPKPDiscreteTimeRangeRect

@dynamic hasTimeRange, timeRange;
@dynamic hasRect, rect;

typedef struct VPKPDiscreteTimeRangeRect__storage_ {
  uint32_t _has_storage_[1];
  VPKPDiscreteTimeRange *timeRange;
  VPKPRect *rect;
} VPKPDiscreteTimeRangeRect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timeRange",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPDiscreteTimeRange),
        .number = VPKPDiscreteTimeRangeRect_FieldNumber_TimeRange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VPKPDiscreteTimeRangeRect__storage_, timeRange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rect",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPRect),
        .number = VPKPDiscreteTimeRangeRect_FieldNumber_Rect,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VPKPDiscreteTimeRangeRect__storage_, rect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPDiscreteTimeRangeRect class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPDiscreteTimeRangeRect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VPKPVeepTrackElement

@implementation VPKPVeepTrackElement

@dynamic metaOneOfCase;
@dynamic dataOneOfCase;
@dynamic header;
@dynamic identifier;
@dynamic discreteTimeRangeRect;
@dynamic rect;

typedef struct VPKPVeepTrackElement__storage_ {
  uint32_t _has_storage_[3];
  VPKPVeepTrackHeader *header;
  NSString *identifier;
  VPKPDiscreteTimeRangeRect *discreteTimeRangeRect;
  VPKPRect *rect;
} VPKPVeepTrackElement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPVeepTrackHeader),
        .number = VPKPVeepTrackElement_FieldNumber_Header,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VPKPVeepTrackElement__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "identifier",
        .dataTypeSpecific.className = NULL,
        .number = VPKPVeepTrackElement_FieldNumber_Identifier,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VPKPVeepTrackElement__storage_, identifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "discreteTimeRangeRect",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPDiscreteTimeRangeRect),
        .number = VPKPVeepTrackElement_FieldNumber_DiscreteTimeRangeRect,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(VPKPVeepTrackElement__storage_, discreteTimeRangeRect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rect",
        .dataTypeSpecific.className = GPBStringifySymbol(VPKPRect),
        .number = VPKPVeepTrackElement_FieldNumber_Rect,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(VPKPVeepTrackElement__storage_, rect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VPKPVeepTrackElement class]
                                     rootClass:[VPKPVeepRoot class]
                                          file:VPKPVeepRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VPKPVeepTrackElement__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "meta",
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\t\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void VPKPVeepTrackElement_ClearMetaOneOfCase(VPKPVeepTrackElement *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
void VPKPVeepTrackElement_ClearDataOneOfCase(VPKPVeepTrackElement *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBMaybeClearOneof(message, oneof, -2, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
