// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: veep.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class VPKPDiscreteTime;
@class VPKPDiscreteTimeRange;
@class VPKPDiscreteTimeRangeRect;
@class VPKPRect;
@class VPKPVeepHeader;
@class VPKPVeepTrackElement;
@class VPKPVeepTrackHeader;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum VPKPVeepTrackHeader_VeepTrackType

typedef GPB_ENUM(VPKPVeepTrackHeader_VeepTrackType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  VPKPVeepTrackHeader_VeepTrackType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  VPKPVeepTrackHeader_VeepTrackType_URL = 0,
  VPKPVeepTrackHeader_VeepTrackType_Retail = 1,
  VPKPVeepTrackHeader_VeepTrackType_Blog = 2,
};

GPBEnumDescriptor *VPKPVeepTrackHeader_VeepTrackType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL VPKPVeepTrackHeader_VeepTrackType_IsValidValue(int32_t value);

#pragma mark - VPKPVeepRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface VPKPVeepRoot : GPBRootObject
@end

#pragma mark - VPKPVeep

typedef GPB_ENUM(VPKPVeep_FieldNumber) {
  VPKPVeep_FieldNumber_Header = 1,
  VPKPVeep_FieldNumber_TrackElementsArray = 2,
};

@interface VPKPVeep : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VPKPVeepHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** All elements involved in all veep tracks, in order of first use. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<VPKPVeepTrackElement*> *trackElementsArray;
/** The number of items in @c trackElementsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger trackElementsArray_Count;

@end

#pragma mark - VPKPVeepHeaderContainer

typedef GPB_ENUM(VPKPVeepHeaderContainer_FieldNumber) {
  VPKPVeepHeaderContainer_FieldNumber_Header = 1,
};

@interface VPKPVeepHeaderContainer : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VPKPVeepHeader *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@end

#pragma mark - VPKPVeepTrackElementContainer

typedef GPB_ENUM(VPKPVeepTrackElementContainer_FieldNumber) {
  VPKPVeepTrackElementContainer_FieldNumber_TrackElement = 2,
};

@interface VPKPVeepTrackElementContainer : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VPKPVeepTrackElement *trackElement;
/** Test to see if @c trackElement has been set. */
@property(nonatomic, readwrite) BOOL hasTrackElement;

@end

#pragma mark - VPKPVeepHeader

typedef GPB_ENUM(VPKPVeepHeader_FieldNumber) {
  VPKPVeepHeader_FieldNumber_Identifier = 1,
  VPKPVeepHeader_FieldNumber_Title = 2,
  VPKPVeepHeader_FieldNumber_Description_p = 3,
  VPKPVeepHeader_FieldNumber_CreatorEmail = 4,
  VPKPVeepHeader_FieldNumber_ThumbnailData = 5,
  VPKPVeepHeader_FieldNumber_OriginalContentURL = 6,
};

/**
 * Veep data
 **/
@interface VPKPVeepHeader : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;

@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *creatorEmail;

@property(nonatomic, readwrite, copy, null_resettable) NSData *thumbnailData;

@property(nonatomic, readwrite, copy, null_resettable) NSString *originalContentURL;

@end

#pragma mark - VPKPVeepTrackHeader

typedef GPB_ENUM(VPKPVeepTrackHeader_FieldNumber) {
  VPKPVeepTrackHeader_FieldNumber_Identifier = 1,
  VPKPVeepTrackHeader_FieldNumber_Title = 2,
  VPKPVeepTrackHeader_FieldNumber_Description_p = 3,
  VPKPVeepTrackHeader_FieldNumber_URL = 4,
  VPKPVeepTrackHeader_FieldNumber_Type = 7,
};

/**
 * Veep Track metadata - within stream
 **/
@interface VPKPVeepTrackHeader : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;

@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

@property(nonatomic, readwrite) VPKPVeepTrackHeader_VeepTrackType type;

@end

/**
 * Fetches the raw value of a @c VPKPVeepTrackHeader's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t VPKPVeepTrackHeader_Type_RawValue(VPKPVeepTrackHeader *message);
/**
 * Sets the raw value of an @c VPKPVeepTrackHeader's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVPKPVeepTrackHeader_Type_RawValue(VPKPVeepTrackHeader *message, int32_t value);

#pragma mark - VPKPRect

typedef GPB_ENUM(VPKPRect_FieldNumber) {
  VPKPRect_FieldNumber_X = 1,
  VPKPRect_FieldNumber_Y = 2,
  VPKPRect_FieldNumber_Width = 3,
  VPKPRect_FieldNumber_Height = 4,
};

/**
 * Abstract still geometry
 **/
@interface VPKPRect : GPBMessage

@property(nonatomic, readwrite) float x;

@property(nonatomic, readwrite) float y;

@property(nonatomic, readwrite) float width;

@property(nonatomic, readwrite) float height;

@end

#pragma mark - VPKPDiscreteTime

typedef GPB_ENUM(VPKPDiscreteTime_FieldNumber) {
  VPKPDiscreteTime_FieldNumber_Timescale = 1,
  VPKPDiscreteTime_FieldNumber_Value = 2,
};

/**
 * This one is based on Apple's CMTime
 **/
@interface VPKPDiscreteTime : GPBMessage

@property(nonatomic, readwrite) int32_t timescale;

@property(nonatomic, readwrite) int64_t value;

@end

#pragma mark - VPKPDiscreteTimeRange

typedef GPB_ENUM(VPKPDiscreteTimeRange_FieldNumber) {
  VPKPDiscreteTimeRange_FieldNumber_Start = 1,
  VPKPDiscreteTimeRange_FieldNumber_Duration = 2,
};

/**
 * This one is based on Apple's CMTime
 **/
@interface VPKPDiscreteTimeRange : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VPKPDiscreteTime *start;
/** Test to see if @c start has been set. */
@property(nonatomic, readwrite) BOOL hasStart;

@property(nonatomic, readwrite, strong, null_resettable) VPKPDiscreteTime *duration;
/** Test to see if @c duration has been set. */
@property(nonatomic, readwrite) BOOL hasDuration;

@end

#pragma mark - VPKPDiscreteTimeRangeRect

typedef GPB_ENUM(VPKPDiscreteTimeRangeRect_FieldNumber) {
  VPKPDiscreteTimeRangeRect_FieldNumber_TimeRange = 1,
  VPKPDiscreteTimeRangeRect_FieldNumber_Rect = 2,
};

/**
 * Annotation is present and stationary for a time range defined discreetly
 **/
@interface VPKPDiscreteTimeRangeRect : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VPKPDiscreteTimeRange *timeRange;
/** Test to see if @c timeRange has been set. */
@property(nonatomic, readwrite) BOOL hasTimeRange;

@property(nonatomic, readwrite, strong, null_resettable) VPKPRect *rect;
/** Test to see if @c rect has been set. */
@property(nonatomic, readwrite) BOOL hasRect;

@end

#pragma mark - VPKPVeepTrackElement

typedef GPB_ENUM(VPKPVeepTrackElement_FieldNumber) {
  VPKPVeepTrackElement_FieldNumber_Header = 1,
  VPKPVeepTrackElement_FieldNumber_Identifier = 2,
  VPKPVeepTrackElement_FieldNumber_DiscreteTimeRangeRect = 9,
  VPKPVeepTrackElement_FieldNumber_Rect = 10,
};

typedef GPB_ENUM(VPKPVeepTrackElement_Meta_OneOfCase) {
  VPKPVeepTrackElement_Meta_OneOfCase_GPBUnsetOneOfCase = 0,
  VPKPVeepTrackElement_Meta_OneOfCase_Header = 1,
  VPKPVeepTrackElement_Meta_OneOfCase_Identifier = 2,
};

typedef GPB_ENUM(VPKPVeepTrackElement_Data_OneOfCase) {
  VPKPVeepTrackElement_Data_OneOfCase_GPBUnsetOneOfCase = 0,
  VPKPVeepTrackElement_Data_OneOfCase_DiscreteTimeRangeRect = 9,
  VPKPVeepTrackElement_Data_OneOfCase_Rect = 10,
};

/**
 * Inner unit of annotation
 **/
@interface VPKPVeepTrackElement : GPBMessage

@property(nonatomic, readonly) VPKPVeepTrackElement_Meta_OneOfCase metaOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) VPKPVeepTrackHeader *header;

@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;

/** All future shapes and representations will go here */
@property(nonatomic, readonly) VPKPVeepTrackElement_Data_OneOfCase dataOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) VPKPDiscreteTimeRangeRect *discreteTimeRangeRect;

@property(nonatomic, readwrite, strong, null_resettable) VPKPRect *rect;

@end

/**
 * Clears whatever value was set for the oneof 'meta'.
 **/
void VPKPVeepTrackElement_ClearMetaOneOfCase(VPKPVeepTrackElement *message);
/**
 * Clears whatever value was set for the oneof 'data'.
 **/
void VPKPVeepTrackElement_ClearDataOneOfCase(VPKPVeepTrackElement *message);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
